"""
TreatmentFlow
Constraint Optimization: Hospital Bed Assignment - Greedy Approach

By Adam Neto and Emese Elkind
Started: February 2025

CISC 352: Artificial Intelligence
"""

from HospitalClasses import HospitalRecords
from HospitalClasses import print_time

# This file is an experimental application of our bed assignment system using the greedy paradigm

"""
Information we are working with:
- list of patients
    - includes arrival time 
    - includes patient priority (generated by DL file)

Goal of solution:
- optimize bed assignment based on priority and arrival
    - minimize the wait times of patients, with higher-priority patients scaled such 
        that their wait times are more punishing if long (multiply wait times by patient cost)

Summary of approach:
- sort list of patients by arrival time (OR create running list that trickles in by arrival time?)
    - sort patients with identical arrival times by priority
        - assign highest priority patients to beds with greedy methods, such that next available bed
            is assigned to next highest priority patient
            - will need a running list of patients to-be-served
                - if a new patient arrives after current patients with a higher priority,
                    they will be assigned a bed first
                        POTENTIAL ISSUE: how to avoid low-priority starvation
"""

# greedy-based hospital simulator class (for testing / showcase)
class Scheduler:
    def __init__(self, Hospital) -> None:
        if not type(Hospital) == HospitalRecords:
            raise TypeError("The Hospital to be scheduled not type Hospital")
        
        self.Hospital = Hospital

    # object oriented hospital simulator
    def run_hospital(self):
        for minute in range(1440):
            change_made = False

            for patient in self.Hospital.serving:
                if minute - patient.service_start >= patient.service_time:
                    self.Hospital.discharge_patient(patient)
                    change_made = True
                    print(f"Discharging {patient.id}")

            for patient in self.Hospital.unserved:
                # print(patient.arrival_time)
                if patient.arrival_time <= minute:
                    if self.Hospital.beds_available:
                        self.Hospital.serve_patient(patient)
                        patient.service_start = minute
                        change_made = True
                        print(f"Serving {patient.id}")
            
            # print current arrangement
            if change_made:
                self.print_arrangement(minute)
                queue = ""
                for patient in self.Hospital.unserved:
                    if patient.arrival_time <= minute:
                        queue = queue + f" {patient.id}:{patient.priority}"
                print(f"Queue: {queue}")

    def waiting_times(self):

        waiting_times_list = []
        for i in range(len(self.Hospital.patient_list)):
            current_patient = self.Hospital.patient_list[i]
            my_waiting_time = current_patient.get_waiting_time()
            
            if my_waiting_time > 0:

                waiting_times_index = 0
                while (waiting_times_index < len(waiting_times_list)) and (my_waiting_time < waiting_times_list[waiting_times_index].get_waiting_time()):
                    waiting_times_index += 1
                
                waiting_times_list.insert(waiting_times_index, current_patient)

        print("\n--Waiting Times--")
        for patient in waiting_times_list:
            print(f"id: {patient.id}, pri: {patient.priority}, wait: {patient.get_waiting_time()}")
                    
    def print_arrangement(self, time):

        WIDTH = 10

        bed_print = []
        row = []

        for bed in self.Hospital.beds:
            if bed.id % WIDTH == 0:
                if bed.id != 0:
                    bed_print.append(row)
                row = []
                
            if bed.occupied:
                row.append(f"{bed.occupant.id}:{bed.occupant.priority}")
            else:
                row.append("   ")

        bed_print.append(row)

        # printing array
        print(f"\n--HOSPITAL AT {print_time(time)}--")
        for this_row in bed_print:
            print(this_row)



# running hospital simulation without constraint satisfacation
B = 5  # CHANGE VALUE TO CHANGE NUMBER OF BEDS
P = 30  # CHANGE VALUE TO CHANGE NUMBER OF PATIENTS

hospital = HospitalRecords(B)
hospital.gen_patient_list(P)

print("\nPATIENTS:")
for patient in hospital.patient_list:
    print(f"{patient.id}, {patient.priority}, {patient.arrival_time_printed()}, --- {patient.service_time_printed()}")

print("\nUNSERVED:")
for patient in hospital.unserved:
    print(f"{patient.id}, {patient.priority}, {patient.arrival_time_printed()}, --- {patient.service_time_printed()}")

# running the hospital simulation
scheduler = Scheduler(hospital)
scheduler.run_hospital()
scheduler.waiting_times()
