"""
TreatmentFlow
Constraint Optimization: Hospital Bed Assignment - Greedy Approach

By Adam Neto and Emese Elkind
Started: February 2025

CISC 352: Artificial Intelligence
"""

import random

# This file is an experimental application of our bed assignment system using the greedy paradigm

"""
Information we are working with:
- list of patients
    - includes arrival time 
    - includes patient priority (generated by DL file)

Goal of solution:
- optimize bed assignment based on priority and arrival
    - minimize the wait times of patients, with higher-priority patients scaled such 
        that their wait times are more punishing if long (multiply wait times by patient cost)

Summary of approach:
- sort list of patients by arrival time (OR create running list that trickles in by arrival time?)
    - sort patients with identical arrival times by priority
        - assign highest priority patients to beds with greedy methods, such that next available bed
            is assigned to next highest priority patient
            - will need a running list of patients to-be-served
                - if a new patient arrives after current patients with a higher priority,
                    they will be assigned a bed first
                        POTENTIAL ISSUE: how to avoid low-priority starvation
"""

# patient class includes information about each individual patient
class Patient:
    def __init__(self, id=0, priority=0, arrival_time=0) -> None:
        self.id = id
        self.priority = priority
        self.arrival_time = arrival_time

    def gen_rand_patient(self):
        self.priority = random.randint(1,5)
        self.arrival_time = random.randint(1,1440)

    def arrival_time_printed(self):
        hours = 0
        minutes = self.arrival_time
        while minutes >= 60:
            hours += 1
            minutes -= 60

        return f"{hours}:{minutes}"

# patient records class includes information about every patient in the hospital
class Patient_Records:
    def __init__(self) -> None:
        self.patient_list = []
        self.unserved = []
        self.max_id = 0

    def gen_patient_list(self, numpatients):
        self.max_id = 0
        plist = []
        
        for i in range(numpatients):
            new_patient = Patient(i)
            new_patient.gen_rand_patient()

            plist.append(new_patient)
            self.insert_unserved(new_patient)

            self.max_id += 1

        self.patient_list = plist

    def add_patient(self, patient):
        if not type(patient) == Patient:
            raise TypeError("The value inserted to the patient_list is not type Patient")
        
        self.max_id += 1
        self.patient_list.append(patient)
        self.insert_unserved(patient)

    def insert_unserved(self, patient):
        if not type(patient) == Patient:
            raise TypeError("The value inserted to the patient_list is not type Patient")
        
        if patient not in self.unserved:
            for i in range(len(self.unserved)):
                if patient.priority > self.unserved[i].priority:
                    self.unserved.insert(i, patient)
                    return
                elif patient.priority == self.unserved[i].priority:
                    if self.unserved[i].arrival_time > patient.arrival_time:
                        self.unserved.insert(i, patient)
                        return
            self.unserved.append(patient)


records = Patient_Records()
records.gen_patient_list(5)

print("PATIENTS:")
for patient in records.patient_list:
    print(f"{patient.id}, {patient.priority}, {patient.arrival_time_printed()}")

print("UNSERVED:")
for patient in records.unserved:
    print(f"{patient.id}, {patient.priority}, {patient.arrival_time_printed()}")
