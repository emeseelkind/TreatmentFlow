"""
TreatmentFlow
Constraint Optimization: Hospital Bed Assignment - Greedy Approach

By Adam Neto and Emese Elkind
Started: February 2025

CISC 352: Artificial Intelligence
"""

from HospitalClasses import HospitalRecords
from HospitalClasses import Scheduler

from ortools.init.python import init
from ortools.linear_solver import pywraplp

# This file is an experimental application of our bed assignment system using the greedy paradigm

"""
Information we are working with:
- list of patients
    - includes arrival time 
    - includes patient priority (generated by DL file)

Goal of solution:
- optimize bed assignment based on priority and arrival
    - minimize the wait times of patients, with higher-priority patients scaled such 
        that their wait times are more punishing if long (multiply wait times by patient cost)

Summary of approach:
- sort list of patients by arrival time (OR create running list that trickles in by arrival time?)
    - sort patients with identical arrival times by priority
        - assign highest priority patients to beds with greedy methods, such that next available bed
            is assigned to next highest priority patient
            - will need a running list of patients to-be-served
                - if a new patient arrives after current patients with a higher priority,
                    they will be assigned a bed first
                        POTENTIAL ISSUE: how to avoid low-priority starvation
"""

# running hospital simulation without constraint satisfacation
B = 20  # CHANGE VALUE TO CHANGE NUMBER OF BEDS
P = 150  # CHANGE VALUE TO CHANGE NUMBER OF PATIENTS

hospital = HospitalRecords(B)
hospital.gen_patient_list(P)

print("\nPATIENTS:")
for patient in hospital.patient_list:
    print(f"{patient.id}, {patient.priority}, {patient.arrival_time_printed()}, --- {patient.service_time_printed()}")

print("\nUNSERVED:")
for patient in hospital.unserved:
    print(f"{patient.id}, {patient.priority}, {patient.arrival_time_printed()}, --- {patient.service_time_printed()}")

# NON-TIME BOUNDED SERVING OF PATIENTS
# print("SERVING PATIENTS")
# records.serve_patients()
# for bed in records.beds:
#     print(f"Bed{bed.id}: {bed.occupant.id}, {bed.occupant.priority}, {bed.occupant.arrival_time_printed()}, --- {bed.occupant.service_time_printed()}")
# print("UNSERVED:")
# for patient in records.unserved:
#     print(f"{patient.id}, {patient.priority}, {patient.arrival_time_printed()}, --- {patient.service_time_printed()}")

# running the hospital simulation
scheduler = Scheduler(hospital)
scheduler.run_hospital()
scheduler.waiting_times()
